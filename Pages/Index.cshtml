@page
@model IndexModel
@{
    ViewData["Title"] = "Deploy PDQ";
}

@Html.AntiForgeryToken()

@* >>> ADICIONAR PARA MENSAGEM DE STATUS DO REFRESH <<< *@
@if (!string.IsNullOrEmpty(Model.StatusMessagePackages))
{
    <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
        @Model.StatusMessagePackages
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@* Container para informações do usuário e botões de ação no topo *@
<div class="d-flex justify-content-between align-items-center mt-3 mb-3">
    <div>
        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
        }
    </div>
    <div>
        @* >>> ADICIONAR BOTÃO DE ATUALIZAR PACOTES <<< *@
        <form method="post" asp-page-handler="RefreshPackages" style="display: inline-block; margin-right: 10px;">
            <button type="submit" class="btn btn-sm btn-outline-secondary">Atualizar Lista de Pacotes</button>
        </form>

        @* Botão de Logout (verifique se o caminho está correto para sua app Identity) *@
        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
        }
    </div>
</div>

<<div class="row mt-4 g-3">
    <div class="col-lg-5">
        <div class="dark-content-box h-100">
            <div class="mb-4 text-center"> 
                <img src="~/images/Logotipo_Gtop_Azul.png" alt="Logo PDQ" style="height: 60px; margin-right: 15px; vertical-align: middle;" />
            </div>
            <h3>Realizar Deploy</h3>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3" role="alert"></div>
            @if (ViewData["ErrorMessage"] != null) { <div class="alert alert-danger mb-3" role="alert">@ViewData["ErrorMessage"]</div> }
            @if (ViewData["WarningMessage"] != null) { <div class="alert alert-warning mb-3" role="alert">@ViewData["WarningMessage"]</div> }

            <form id="deployForm" method="post">
                <div class="mb-3">
                    <label asp-for="Hostname" class="form-label"></label>
                    <input asp-for="Hostname" id="hostnameInput" class="form-control" placeholder="Ex.: Hostname ou IP" />
                    <span asp-validation-for="Hostname" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="SelectedPackage" class="form-label"></label>
                    @if (Model.PackageOptions != null && Model.PackageOptions.Any())
                    {
                        <select asp-for="SelectedPackage" id="packageSelect" class="form-select" asp-items="Model.PackageOptions">
                            <option value="">-- Selecione um Pacote --</option>
                        </select>
                    }
                    else
                    {
                        <select id="packageSelect" class="form-select" disabled>
                             <option value="">@((Model.PackageOptions == null) ? "Erro ao carregar" : "Nenhum pacote")</option>
                         </select>
                         <small class="text-warning">Lista de pacotes indisponível.</small>
                    }
                    <span asp-validation-for="SelectedPackage" class="text-danger"></span>
                </div>
                <div class="d-grid gap-2 mt-4">
                    <button type="button" id="deployButton" class="btn btn-success btn-lg">
                        <span id="deployButtonText">Realizar Deploy</span>
                        <span id="deploySpinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: none;"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="col-lg-7">
        <div class="dark-content-box h-100 d-flex flex-column">
            <div class="mb-4">
                 <h1 class="display-6">Logs do Deploy</h1>
                 <p>Acompanhe o status e os resultados.</p>
             </div>
            <h3>Logs</h3>
            <hr />
             <div id="logOutputContainer" class="flex-grow-1" style="overflow-y: auto; background-color: #111; border: 1px solid #444; padding: 15px; border-radius: 4px;">
                <pre id="logOutput" style="white-space: pre-wrap; word-wrap: break-word; margin: 0; color: #ccc; font-family: Consolas, 'Courier New', monospace; font-size: 0.85em;">Aguardando execução...</pre>
             </div>
         </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Seu JavaScript original permanece aqui, sem alterações necessárias para o botão de refresh
        document.addEventListener('DOMContentLoaded', function () {
            const deployButton = document.getElementById('deployButton');
            const deployButtonText = document.getElementById('deployButtonText');
            const hostnameInput = document.getElementById('hostnameInput');
            const packageSelect = document.getElementById('packageSelect');
            const logOutput = document.getElementById('logOutput');
            const logContainer = document.getElementById('logOutputContainer');
            const spinner = document.getElementById('deploySpinner');
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            deployButton.addEventListener('click', function () {
                const hostname = hostnameInput.value.trim();
                const selectedPackage = packageSelect.value;
                if (!hostname || !selectedPackage) { alert('Hostname e Pacote são obrigatórios.'); return; }

                logOutput.textContent = `[${_getCurrentTime()}] Iniciando para '${hostname}' com pacote '${selectedPackage}'...\n---------------------------------------\n`;
                logContainer.style.borderColor = '#444'; _scrollToBottom(logContainer);
                deployButton.disabled = true; spinner.style.display = 'inline-block'; deployButtonText.textContent = 'Executando...';

                const formData = new FormData(); formData.append('hostname', hostname); formData.append('selectedPackage', selectedPackage);

                 fetch('/Index?handler=Deploy', { method: 'POST', headers: { 'RequestVerificationToken': antiForgeryToken }, body: formData })
                 .then(response => {
                    if (!response.ok) { return response.text().then(text => { throw new Error(`Erro Servidor ${response.status}: ${text || 'Detalhe não disponível.'}`); }); }
                     return response.json();
                 })
                 .then(data => { _displayLog(data.log || '[Sem log]', data.success); _scrollToBottom(logContainer); })
                 .catch(error => { console.error('Erro deploy:', error); _displayLog(`ERRO Comunicação:\n${error.message}`, false); _scrollToBottom(logContainer); })
                 .finally(() => { deployButton.disabled = false; spinner.style.display = 'none'; deployButtonText.textContent = 'Realizar Deploy'; });
            });
            function _displayLog(logText, success) { logOutput.textContent += `\n[${_getCurrentTime()}] Resposta Servidor:\n---------------------------------------\n${logText}\n=======================================\n`; logContainer.style.borderColor = success ? '#198754' : '#dc3545'; }
            function _scrollToBottom(element) { element.scrollTop = element.scrollHeight; }
            function _getCurrentTime() { return new Date().toLocaleTimeString('pt-BR'); }
        });
    </script>
}
